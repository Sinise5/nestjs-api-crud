var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.169,1,1.965]],["body/controllers/AppController.html",[0,1.813,1,3.046,2,1.616,3,0.505,4,0.425,5,0.425,6,2.838,7,0.681,8,1.813,9,4.137,10,1.433,11,0.046,12,0.78,13,3.492,14,1.433,15,1.61,16,0.638,17,0.78,18,2.894,19,3.492,20,0.505,21,0.147,22,2.087,23,1.616,24,1.433,25,3.492,26,0.036,27,0.036]],["title/modules/AppModule.html",[28,1.169,29,1.702]],["body/modules/AppModule.html",[3,0.35,4,0.295,5,0.295,11,0.046,16,0.697,17,0.541,20,0.35,21,0.102,26,0.028,27,0.028,28,1.651,29,3.029,30,1.121,31,1.121,32,1.448,33,1.448,34,1.121,35,1.448,36,1.448,37,1.969,38,1.969,39,2.525,40,2.23,41,2.063,42,1.448,43,1.269,44,2.422,45,2.774,46,1.969,47,1.269,48,2.806,49,3.564,50,1.448,51,2.422,52,1.969,53,0.992,54,2.422,55,2.422,56,2.422,57,3.27,58,2.422,59,2.422,60,2.422,61,2.422,62,2.422,63,2.422,64,1.969,65,0.541,66,2.422,67,2.422,68,2.422,69,2.422,70,2.422,71,0.785,72,2.422,73,0.883,74,2.422,75,2.422,76,2.422,77,1.671,78,2.422,79,2.422,80,3.452,81,1.969,82,2.422,83,1.969,84,1.969,85,2.422,86,1.969,87,1.969,88,2.422,89,2.422,90,2.422,91,1.969,92,1.969,93,1.969,94,1.969,95,1.969]],["title/injectables/AppService.html",[18,1.702,96,0.723]],["body/injectables/AppService.html",[3,0.532,4,0.448,5,0.448,7,0.719,8,1.874,9,4.217,11,0.045,12,0.822,14,1.511,15,1.665,16,0.532,17,0.822,18,2.728,20,0.532,21,0.155,24,1.511,26,0.037,27,0.037,96,1.159,97,1.704,98,2.993,99,3.682,100,3.682,101,3.682]],["title/controllers/AuthController.html",[0,1.169,102,1.702]],["body/controllers/AuthController.html",[0,0.914,2,1.031,3,0.322,4,0.271,5,0.271,7,0.435,8,1.333,10,1.333,11,0.046,12,0.726,14,1.333,16,0.61,17,0.497,20,0.322,21,0.137,22,1.331,23,1.031,24,1.333,26,0.026,27,0.026,53,0.933,65,0.726,71,0.721,73,0.812,102,1.941,103,1.81,104,1.81,105,2.226,106,2.167,107,3.118,108,2.641,109,2.226,110,2.798,111,3.249,112,2.226,113,1.504,114,1.504,115,1.504,116,2.24,117,2.226,118,2.167,119,3.249,120,2.226,121,1.81,122,1.81,123,1.81,124,2.226,125,1.775,126,1.81,127,2.226,128,2.226,129,2.226,130,2.226,131,2.226,132,2.226,133,1.535,134,3.249,135,2.226,136,2.226,137,1.167,138,2.645,139,2.908,140,2.226,141,2.226,142,2.641,143,2.24,144,2.226,145,2.226,146,2.226,147,2.24,148,3.249,149,3.249,150,2.226,151,2.226,152,1.81,153,2.226,154,2.226,155,3.249,156,2.226,157,2.226,158,1.81,159,3.249,160,2.226,161,2.226,162,2.226]],["title/modules/AuthModule.html",[28,1.169,39,1.493]],["body/modules/AuthModule.html",[2,1.587,3,0.347,4,0.292,5,0.292,11,0.046,16,0.731,17,0.536,20,0.347,21,0.101,26,0.028,27,0.028,28,1.642,30,1.11,31,1.11,32,1.434,33,1.434,34,1.11,35,2.391,36,2.391,39,2.769,40,2.223,41,2.049,42,1.434,43,1.257,45,2.759,48,3.252,50,1.434,52,1.95,64,1.95,86,3.252,87,3.252,91,1.95,93,1.95,94,1.95,95,1.95,102,2.391,106,1.11,125,2.471,126,1.95,163,1.95,164,1.95,165,1.95,166,2.399,167,2.517,168,2.399,169,2.399,170,2.399,171,1.654,172,3.428,173,1.654,174,2.399,175,2.399,176,2.399,177,1.95]],["title/injectables/AuthService.html",[96,0.723,125,1.319]],["body/injectables/AuthService.html",[3,0.291,4,0.245,5,0.245,7,0.393,8,1.239,11,0.046,12,0.961,14,1.649,15,1.935,16,0.523,17,0.45,20,0.291,21,0.085,23,1.397,24,1.766,26,0.024,27,0.024,53,1.154,65,0.961,71,1.301,73,1.755,96,0.766,97,0.933,106,2.386,107,2.453,108,2.453,113,1.991,114,1.991,115,1.991,116,2.77,123,1.638,125,1.397,138,2.495,139,2.77,171,1.39,178,1.638,179,3.018,180,3.018,181,1.803,182,2.015,183,1.854,184,4.682,185,2.015,186,3.018,187,2.015,188,3.018,189,2.015,190,3.018,191,2.015,192,3.018,193,2.015,194,2.015,195,2.081,196,3.018,197,3.018,198,3.018,199,2.015,200,1.638,201,1.638,202,2.015,203,2.015,204,2.015,205,2.015,206,2.015]],["title/injectables/JwtStrategy.html",[96,0.723,167,1.493]],["body/injectables/JwtStrategy.html",[3,0.401,4,0.338,5,0.338,7,0.542,8,1.558,11,0.046,12,0.848,14,1.139,16,0.672,17,0.62,20,0.401,21,0.117,22,1.658,23,1.284,24,1.139,26,0.031,27,0.031,49,4.089,50,1.658,65,0.848,71,0.899,92,2.256,96,0.964,97,1.284,106,2.003,113,1.757,114,1.757,115,1.757,116,1.914,167,1.989,173,1.914,177,2.256,181,1.658,200,2.256,207,2.256,208,3.086,209,3.796,210,3.517,211,3.796,212,2.775,213,2.775,214,3.796,215,2.775,216,2.775,217,2.775,218,2.775,219,2.256,220,2.775,221,2.775,222,2.775,223,2.775,224,2.256,225,2.775,226,2.775,227,2.775,228,2.775,229,2.775]],["title/classes/LoginDto.html",[21,0.12,110,1.702]],["body/classes/LoginDto.html",[3,0.43,4,0.362,5,0.362,7,0.581,10,1.633,11,0.045,12,0.889,15,1.745,16,0.43,20,0.43,21,0.168,26,0.032,27,0.032,65,0.889,71,1.616,73,1.912,110,2.378,133,3.092,137,1.559,147,3.301,230,1.778,231,2.418,232,1.842,233,3.234,234,3.891,235,3.891,236,2.418,237,3.234,238,3.234,239,3.234,240,2.975,241,2.975,242,3.644,243,2.052,244,3.092,245,2.052]],["title/classes/RegisterDto.html",[21,0.12,118,1.319]],["body/classes/RegisterDto.html",[3,0.5,4,0.421,5,0.421,7,0.675,10,1.802,11,0.045,12,0.981,15,1.85,16,0.5,20,0.5,21,0.185,26,0.035,27,0.035,65,0.981,71,1.562,73,1.758,118,2.032,137,1.813,230,2.067,232,2.032,243,2.386,244,3.498,245,2.386,246,2.812,247,3.459,248,3.459,249,3.459]],["title/classes/RegisterDto-1.html",[21,0.101,118,1.107,250,1.943]],["body/classes/RegisterDto-1.html",[3,0.388,4,0.327,5,0.327,7,0.524,10,1.523,11,0.045,12,0.829,15,1.673,16,0.388,20,0.388,21,0.156,26,0.03,27,0.03,65,0.829,71,1.653,73,1.925,118,1.718,133,2.559,137,1.407,147,3.587,230,1.604,232,1.718,233,3.016,234,3.729,235,3.729,236,2.182,237,3.729,238,3.016,239,3.914,242,3.457,243,1.852,244,2.933,245,1.852,251,2.182,252,2.685,253,3.711,254,3.711,255,2.685,256,2.685,257,3.711,258,2.685,259,2.685,260,2.685,261,2.685]],["title/entities/User.html",[53,0.818,262,1.965]],["body/entities/User.html",[3,0.463,4,0.39,5,0.39,7,0.626,10,1.909,11,0.045,12,1.039,15,1.797,16,0.463,20,0.463,21,0.135,26,0.034,27,0.034,53,1.201,57,3.398,65,1.039,71,1.507,73,1.696,77,2.211,232,1.935,262,2.883,263,2.606,264,3.208,265,2.883,266,4.652,267,3.206,268,4.93,269,3.206,270,3.206,271,3.206,272,1.916,273,3.206]],["title/injectables/UserRepository.html",[96,0.723,274,1.965]],["body/injectables/UserRepository.html",[3,0.474,4,0.399,5,0.399,11,0.046,12,0.732,16,0.719,17,0.732,20,0.474,21,0.138,23,1.517,26,0.034,27,0.034,47,1.717,53,0.941,65,0.732,96,1.076,97,1.517,113,1.517,114,1.517,115,1.517,181,2.534,195,2.259,208,3.446,272,1.958,274,2.924,275,2.663,276,3.751,277,3.276,278,3.276,279,2.663,280,1.958,281,2.663,282,3.276,283,3.276,284,3.276]],["title/controllers/UsersController.html",[0,1.169,285,1.702]],["body/controllers/UsersController.html",[0,0.86,2,0.97,3,0.303,4,0.255,5,0.255,7,0.409,8,1.275,10,1.795,11,0.046,12,0.977,14,1.795,16,0.535,17,0.468,20,0.303,21,0.088,22,1.252,23,0.97,24,1.795,26,0.025,27,0.025,53,0.602,65,0.827,104,1.703,106,2.472,113,1.895,114,1.895,115,1.895,121,3.009,122,3.854,183,1.52,264,3.159,265,3.43,280,1.252,285,1.856,286,1.703,287,2.095,288,2.525,289,2.525,290,4.095,291,3.106,292,2.525,293,2.095,294,2.095,295,4.114,296,1.703,297,3.106,298,2.095,299,2.095,300,2.095,301,3.106,302,2.095,303,1.703,304,3.106,305,2.095,306,2.095,307,2.095,308,2.095,309,1.703,310,2.095,311,2.095,312,2.095,313,2.095,314,2.095,315,2.095,316,3.106,317,2.095,318,2.095,319,2.095,320,2.095,321,2.095]],["title/modules/UsersModule.html",[28,1.169,40,1.319]],["body/modules/UsersModule.html",[2,1.817,3,0.422,4,0.355,5,0.355,11,0.046,16,0.716,17,0.651,20,0.422,21,0.123,26,0.032,27,0.032,28,1.822,30,1.35,31,1.35,32,1.743,33,1.743,34,1.35,35,2.652,36,2.652,40,2.415,41,2.346,42,1.743,43,1.528,45,2.011,46,2.371,47,1.528,53,0.838,83,2.371,152,2.371,158,2.371,183,2.28,280,1.743,285,2.652,309,2.371,322,2.371,323,2.371,324,2.371,325,2.916,326,2.916,327,2.916,328,2.916,329,2.916,330,2.916,331,2.916]],["title/injectables/UsersService.html",[96,0.723,183,1.169]],["body/injectables/UsersService.html",[3,0.208,4,0.175,5,0.175,7,0.281,8,0.954,11,0.046,12,0.961,14,1.697,15,1.862,16,0.532,17,0.322,20,0.208,21,0.061,24,1.613,26,0.019,27,0.019,47,0.755,53,1.454,65,0.924,71,1.51,73,1.7,96,0.59,97,0.667,106,2.416,113,1.914,114,1.914,115,1.914,138,2.711,139,2.852,142,2.725,143,2.311,181,1.389,183,0.954,195,0.994,201,1.171,224,1.171,264,2.967,265,3.064,272,0.861,276,2.311,279,1.171,280,0.861,281,1.171,288,1.889,289,1.889,292,1.889,295,3.981,296,1.889,303,1.889,332,1.171,333,3.352,334,2.324,335,2.324,336,2.324,337,1.441,338,1.441,339,2.324,340,2.324,341,1.441,342,1.441,343,1.441,344,2.324,345,1.441,346,2.324,347,1.441,348,1.441,349,2.324,350,1.441,351,1.441,352,1.889,353,3.352,354,2.324,355,3.352,356,1.441,357,2.324,358,1.441,359,2.324,360,2.324,361,2.324,362,1.441,363,2.324,364,2.324,365,1.441]],["title/coverage.html",[366,2.665]],["body/coverage.html",[0,1.826,1,2.019,5,0.356,6,2.38,11,0.045,18,1.75,21,0.187,26,0.032,27,0.032,34,1.355,53,0.841,65,0.654,96,1.26,98,2.38,102,1.75,103,2.38,110,1.75,118,1.822,125,1.355,143,2.019,167,1.534,178,2.38,183,1.202,207,2.38,231,2.38,246,2.38,251,2.38,262,2.019,263,2.38,274,2.019,275,2.38,285,1.75,286,2.38,332,2.38,366,2.019,367,2.38,368,2.928,369,2.928,370,5.557,371,4.448,372,4.963,373,3.937,374,2.38,375,2.928,376,3.937,377,2.928,378,2.928,379,2.928]],["title/dependencies.html",[31,1.583,380,1.943]],["body/dependencies.html",[11,0.046,17,0.752,21,0.182,26,0.035,27,0.035,31,1.558,47,1.764,50,2.011,137,1.764,171,2.321,173,2.321,210,2.736,219,3.506,272,2.011,352,2.736,381,4.761,382,4.314,383,3.365,384,4.314,385,3.365,386,3.365,387,3.365,388,3.365,389,3.365,390,3.365,391,3.365,392,3.365,393,3.365,394,3.365,395,3.365,396,3.365,397,3.365,398,3.365,399,3.365,400,3.365]],["title/miscellaneous/functions.html",[401,1.943,402,2.78]],["body/miscellaneous/functions.html",[7,0.83,11,0.04,26,0.04,27,0.04,34,2.444,374,3.455,401,3.455,402,3.455,403,4.25]],["title/index.html",[7,0.467,404,2.391,405,2.391]],["body/index.html",[4,0.222,11,0.043,26,0.023,27,0.023,43,2.279,81,1.485,84,2.278,276,1.26,366,1.26,367,2.278,406,1.827,407,1.827,408,3.408,409,2.802,410,1.827,411,1.827,412,1.827,413,1.827,414,2.802,415,1.485,416,3.408,417,1.827,418,1.827,419,3.821,420,1.827,421,3.821,422,4.671,423,1.827,424,4.527,425,1.827,426,1.827,427,2.802,428,1.827,429,1.827,430,3.408,431,1.827,432,2.802,433,1.827,434,1.827,435,1.827,436,1.827,437,1.827,438,3.821,439,4.671,440,4.348,441,1.827,442,2.802,443,1.827,444,1.827,445,1.827,446,1.827,447,1.827,448,4.348,449,2.802,450,3.821,451,1.827,452,2.802,453,1.827,454,1.827,455,2.802,456,4.348,457,3.821,458,1.827,459,2.802,460,1.827,461,1.827,462,1.827,463,1.827,464,3.821,465,1.827,466,1.827,467,1.827,468,1.827,469,2.802,470,1.827,471,1.827,472,1.827,473,1.827,474,1.827,475,2.802,476,1.827,477,1.827,478,1.827,479,2.802,480,1.827,481,1.827,482,3.106,483,2.802,484,1.827,485,1.827,486,1.827,487,1.827,488,1.827,489,1.827,490,1.827,491,1.827,492,2.802,493,1.827,494,1.827,495,1.827,496,1.827,497,3.408,498,1.827,499,1.827,500,1.827,501,1.827,502,1.827,503,1.827,504,2.802,505,1.827,506,1.827,507,1.827,508,1.827,509,1.827,510,2.802,511,1.827,512,1.827,513,1.827,514,2.802,515,2.802,516,1.827,517,1.827,518,1.827,519,1.827,520,1.827,521,1.827,522,1.827,523,1.827,524,1.827,525,1.827,526,1.827,527,1.485,528,1.827,529,1.827,530,1.827,531,1.827,532,1.827,533,1.827,534,1.485]],["title/modules.html",[30,1.789]],["body/modules.html",[11,0.039,26,0.039,27,0.039,29,2.429,30,1.881,39,2.13,40,1.881,482,4.212,535,5.181,536,5.181,537,5.181]],["title/overview.html",[538,3.142]],["body/overview.html",[2,1.405,11,0.044,26,0.032,27,0.032,28,1.246,29,3.086,30,1.405,31,1.405,32,1.814,33,1.814,34,1.405,35,1.814,36,1.814,37,2.468,38,2.468,39,2.867,40,2.439,41,2.41,42,1.814,43,1.591,77,2.093,97,1.405,125,2.439,163,2.468,164,2.468,165,2.468,167,2.373,183,2.163,230,1.814,250,2.468,322,2.468,323,2.468,324,2.468,538,2.468,539,4.529,540,3.036]],["title/properties.html",[232,1.583,380,1.943]],["body/properties.html",[11,0.045,26,0.04,27,0.04,232,1.934,415,3.397,527,3.397,534,3.397,541,4.179,542,4.179,543,4.179]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":542,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["0.3.21",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":250,"title":{"classes/RegisterDto-1.html":{}},"body":{"overview.html":{}}}],["10",{"_index":361,"title":{},"body":{"injectables/UsersService.html":{}}}],["11.0.0",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["20",{"_index":254,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["3",{"_index":539,"title":{},"body":{"overview.html":{}}}],["4",{"_index":257,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["4.0.1",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":540,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":388,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":238,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["7.8.1",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["8.14.1",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["allowing",{"_index":470,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":520,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["application",{"_index":440,"title":{},"body":{"index.html":{}}}],["applications",{"_index":414,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["async",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["atau",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":102,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":39,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":527,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":125,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":459,"title":{},"body":{"index.html":{}}}],["backers",{"_index":521,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["badrequestexception('username",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["based",{"_index":454,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":352,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":356,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":360,"title":{},"body":{"injectables/UsersService.html":{}}}],["belum",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["berhasil",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["board",{"_index":513,"title":{},"body":{"index.html":{}}}],["body",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["body.password",{"_index":316,"title":{},"body":{"controllers/UsersController.html":{}}}],["body.username",{"_index":319,"title":{},"body":{"controllers/UsersController.html":{}}}],["boleh",{"_index":235,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":537,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":535,"title":{},"body":{"modules.html":{}}}],["building",{"_index":409,"title":{},"body":{"index.html":{}}}],["channel",{"_index":485,"title":{},"body":{"index.html":{}}}],["check",{"_index":448,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":230,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"overview.html":{}}}],["clicks",{"_index":469,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":453,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":322,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":323,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":324,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":268,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":270,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":476,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["const",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(repository",{"_index":277,"title":{},"body":{"injectables/UserRepository.html":{}}}],["constructor(usersrepository",{"_index":337,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":310,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":491,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":366,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createuser",{"_index":288,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":314,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(body",{"_index":293,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(username",{"_index":340,"title":{},"body":{"injectables/UsersService.html":{}}}],["data",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["database",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":487,"title":{},"body":{"index.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":307,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":297,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser",{"_index":289,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@param('id",{"_index":320,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":296,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":438,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":458,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":449,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":468,"title":{},"body":{"index.html":{}}}],["description",{"_index":415,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":499,"title":{},"body":{"index.html":{}}}],["di",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["diekspor",{"_index":328,"title":{},"body":{"modules/UsersModule.html":{}}}],["digunakan",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"modules/UsersModule.html":{}}}],["dilakukan",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["dipakai",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["discord",{"_index":484,"title":{},"body":{"index.html":{}}}],["dive",{"_index":486,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":367,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto/login.dto",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/register.dto",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["e2e",{"_index":433,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":410,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":446,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":444,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":503,"title":{},"body":{"index.html":{}}}],["entities",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":262,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["env",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":421,"title":{},"body":{"index.html":{}}}],["experience",{"_index":489,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":208,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["extractjwt",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["fast",{"_index":462,"title":{},"body":{"index.html":{}}}],["features",{"_index":472,"title":{},"body":{"index.html":{}}}],["few",{"_index":464,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":333,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":334,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":344,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername",{"_index":335,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":346,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyusername",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserbyusername(username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["focus",{"_index":471,"title":{},"body":{"index.html":{}}}],["follow",{"_index":507,"title":{},"body":{"index.html":{}}}],["found",{"_index":355,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":408,"title":{},"body":{"index.html":{}}}],["full",{"_index":502,"title":{},"body":{"index.html":{}}}],["function",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":402,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":467,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":301,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers",{"_index":290,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":404,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":291,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@param('id",{"_index":311,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(id",{"_index":300,"title":{},"body":{"controllers/UsersController.html":{}}}],["global",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":494,"title":{},"body":{"index.html":{}}}],["grow",{"_index":517,"title":{},"body":{"index.html":{}}}],["hands",{"_index":488,"title":{},"body":{"index.html":{}}}],["handy",{"_index":477,"title":{},"body":{"index.html":{}}}],["hanya",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["hashedpassword",{"_index":359,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":492,"title":{},"body":{"index.html":{}}}],["here",{"_index":525,"title":{},"body":{"index.html":{}}}],["host",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":531,"title":{},"body":{"index.html":{}}}],["id",{"_index":264,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":451,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":474,"title":{},"body":{"index.html":{}}}],["ini",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["inject",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":96,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":279,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":281,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["install",{"_index":466,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":423,"title":{},"body":{"index.html":{}}}],["interact",{"_index":495,"title":{},"body":{"index.html":{}}}],["isglobal",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":242,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["ispasswordvalid",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":244,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["isstring()@isnotempty({message",{"_index":233,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["isstring()@minlength(6",{"_index":247,"title":{},"body":{"classes/RegisterDto.html":{}}}],["jangan",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["jika",{"_index":329,"title":{},"body":{"modules/UsersModule.html":{}}}],["job",{"_index":510,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":512,"title":{},"body":{"index.html":{}}}],["join",{"_index":523,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":167,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":528,"title":{},"body":{"index.html":{}}}],["karakter",{"_index":239,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["karakter'})@maxlength(20",{"_index":252,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["key",{"_index":441,"title":{},"body":{"index.html":{}}}],["kosong",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["kosong'})@minlength(4",{"_index":256,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["kosong'})@minlength(6",{"_index":236,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["lain",{"_index":331,"title":{},"body":{"modules/UsersModule.html":{}}}],["learn",{"_index":480,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":534,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":515,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":509,"title":{},"body":{"index.html":{}}}],["load",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":110,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":452,"title":{},"body":{"index.html":{}}}],["loop",{"_index":505,"title":{},"body":{"index.html":{}}}],["makes",{"_index":460,"title":{},"body":{"index.html":{}}}],["maksimal",{"_index":253,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["managing",{"_index":473,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":456,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":259,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["maxlength(20",{"_index":261,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["melihat",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["metadata",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimal",{"_index":237,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["minlength",{"_index":243,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["minlength(4",{"_index":260,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["minlength(6",{"_index":245,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}}}],["miscellaneous",{"_index":401,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":514,"title":{},"body":{"index.html":{}}}],["mode",{"_index":427,"title":{},"body":{"index.html":{}}}],["modul",{"_index":330,"title":{},"body":{"modules/UsersModule.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":450,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":529,"title":{},"body":{"index.html":{}}}],["name",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":500,"title":{},"body":{"index.html":{}}}],["nest",{"_index":416,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":533,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":439,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["node.js",{"_index":407,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":351,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":364,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":354,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":422,"title":{},"body":{"index.html":{}}}],["null",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":265,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":511,"title":{},"body":{"index.html":{}}}],["official",{"_index":457,"title":{},"body":{"index.html":{}}}],["oleh",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["open",{"_index":516,"title":{},"body":{"index.html":{}}}],["optional",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":538,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":380,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":308,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["part",{"_index":501,"title":{},"body":{"index.html":{}}}],["passport",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":209,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["pastikan",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"modules/UsersModule.html":{}}}],["payload",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perbaikan",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":455,"title":{},"body":{"index.html":{}}}],["please",{"_index":483,"title":{},"body":{"index.html":{}}}],["port",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":447,"title":{},"body":{"index.html":{}}}],["post",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":266,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["production",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progressive",{"_index":406,"title":{},"body":{"index.html":{}}}],["project",{"_index":419,"title":{},"body":{"index.html":{}}}],["promise",{"_index":295,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":232,"title":{"properties.html":{}},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":306,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id",{"_index":304,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["questions",{"_index":481,"title":{},"body":{"index.html":{}}}],["read",{"_index":524,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":437,"title":{},"body":{"index.html":{}}}],["real",{"_index":496,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(username",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":118,"title":{"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"coverage.html":{}}}],["registerdto.password",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["registrasi",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["repository",{"_index":276,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.manager",{"_index":283,"title":{},"body":{"injectables/UserRepository.html":{}}}],["repository.queryrunner",{"_index":284,"title":{},"body":{"injectables/UserRepository.html":{}}}],["requiring",{"_index":463,"title":{},"body":{"index.html":{}}}],["reset",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":475,"title":{},"body":{"index.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":424,"title":{},"body":{"index.html":{}}}],["runs",{"_index":445,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["salah",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":411,"title":{},"body":{"index.html":{}}}],["secara",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["secret",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["secret_key",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":412,"title":{},"body":{"index.html":{}}}],["setup",{"_index":420,"title":{},"body":{"index.html":{}}}],["side",{"_index":413,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["simple",{"_index":465,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":519,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.dto.ts",{"_index":246,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/auth.dto.ts:5",{"_index":249,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/auth.dto.ts:9",{"_index":248,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/auth.module.ts",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:6",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":231,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:11",{"_index":240,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:6",{"_index":241,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":251,"title":{},"body":{"classes/RegisterDto-1.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:13",{"_index":255,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["src/auth/dto/register.dto.ts:7",{"_index":258,"title":{},"body":{"classes/RegisterDto-1.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":207,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/main.ts",{"_index":374,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/user.entity.ts",{"_index":263,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:12",{"_index":269,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":267,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":271,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":286,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:18",{"_index":302,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:23",{"_index":299,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:28",{"_index":294,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:33",{"_index":305,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:38",{"_index":298,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":325,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository.ts",{"_index":275,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/users/users.repository.ts:7",{"_index":278,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/users.service.ts",{"_index":332,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:14",{"_index":345,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":350,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":347,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:34",{"_index":343,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":341,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":348,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":342,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":338,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":425,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":428,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":429,"title":{},"body":{"index.html":{}}}],["started",{"_index":405,"title":{"index.html":{}},"body":{}}],["starter",{"_index":418,"title":{},"body":{"index.html":{}}}],["statements",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":504,"title":{},"body":{"index.html":{}}}],["steps",{"_index":442,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":461,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["sudah",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(repository.target",{"_index":282,"title":{},"body":{"injectables/UserRepository.html":{}}}],["support",{"_index":482,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":536,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":379,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":378,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":443,"title":{},"body":{"index.html":{}}}],["tambahkan",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["test",{"_index":432,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":435,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":434,"title":{},"body":{"index.html":{}}}],["tests",{"_index":430,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":518,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.finduserbyusername(registerdto.username",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto.username",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(logindto.username",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.sign(payload",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.create",{"_index":362,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":358,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":353,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user",{"_index":365,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":363,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(body.username",{"_index":315,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(username",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.deleteuser(id",{"_index":321,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":313,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":312,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyusername(username",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuser(id",{"_index":318,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validatepassword(user",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["tidak",{"_index":234,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto-1.html":{}}}],["time",{"_index":497,"title":{},"body":{"index.html":{}}}],["touch",{"_index":526,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["twitter",{"_index":532,"title":{},"body":{"index.html":{}}}],["type",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":272,"title":{},"body":{"entities/User.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":327,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":417,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('username",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["unique",{"_index":273,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":431,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":543,"title":{},"body":{"properties.html":{}}}],["untuk",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["updates",{"_index":506,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":292,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(@param('id",{"_index":317,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(id",{"_index":303,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usefactory",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user",{"_index":53,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.entity",{"_index":280,"title":{},"body":{"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":357,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userexists",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["username",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["userrepository",{"_index":274,"title":{"injectables/UserRepository.html":{}},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["users",{"_index":287,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":326,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":309,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":285,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":40,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":339,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":183,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":498,"title":{},"body":{"index.html":{}}}],["validasi",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate",{"_index":211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":336,"title":{},"body":{"injectables/UsersService.html":{}}}],["validatepassword(user",{"_index":349,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/RegisterDto-1.html":{},"dependencies.html":{}}}],["version",{"_index":541,"title":{},"body":{"properties.html":{}}}],["video",{"_index":490,"title":{},"body":{"index.html":{}}}],["visit",{"_index":479,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":493,"title":{},"body":{"index.html":{}}}],["watch",{"_index":426,"title":{},"body":{"index.html":{}}}],["website",{"_index":530,"title":{},"body":{"index.html":{}}}],["working",{"_index":478,"title":{},"body":{"index.html":{}}}],["world",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":508,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":522,"title":{},"body":{"index.html":{}}}],["you're",{"_index":436,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { User } from './users/user.entity';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }), // ✅ Load .env secara global\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [User],\n        synchronize: true, // ⚠️ Hanya untuk development, jangan di production!\n        logging: true, // Tambahkan ini untuk melihat log query\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '1h' },\n      }),\n    }),\n    AuthModule,\n    UsersModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    // Validasi input kosong sudah dilakukan oleh class-validator\n    const user = await this.authService.validateUser(loginDto.username, loginDto.password);\n    if (!user) {\n      throw new UnauthorizedException('Username atau password salah');\n    }\n\n    return {\n      message: 'Login berhasil',\n      data: await this.authService.login(user),\n    };\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    // Pastikan username belum dipakai\n    const userExists = await this.authService.findUserByUsername(registerDto.username);\n    if (userExists) {\n      throw new BadRequestException('Username sudah digunakan');\n    }\n\n    const newUser = await this.authService.register(registerDto.username, registerDto.password);\n    return {\n      message: 'Registrasi berhasil',\n      data: newUser,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config'; // Tambahkan ini\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule, // Tambahkan ini\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async () => ({\n        secret: process.env.JWT_SECRET || 'SECRET_KEY',\n        signOptions: { expiresIn: '1h' },\n      }),\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService], // Tambahkan ini\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserByUsername\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateUser(username: string, password: string) {\n    const user = await this.usersService.findByUsername(username);\n    if (!user) {\n      return null;\n    }\n    const isPasswordValid = await this.usersService.validatePassword(user, password);\n    return isPasswordValid ? user : null;\n  }\n\n  async login(user: any) {\n    const payload = { username: user.username, sub: user.id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(username: string, password: string) {\n    return await this.usersService.createUser(username, password);\n  }\n\n  async findUserByUsername(username: string) {\n    return await this.usersService.findByUsername(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET') || 'SECRET_KEY', // ✅ Perbaikan\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Password tidak boleh kosong'})@MinLength(6, {message: 'Password minimal 6 karakter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Username tidak boleh kosong'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty({ message: 'Username tidak boleh kosong' })\n  username: string;\n\n  @IsString()\n  @IsNotEmpty({ message: 'Password tidak boleh kosong' })\n  @MinLength(6, { message: 'Password minimal 6 karakter' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  username: string;\n\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto-1.html":{"url":"classes/RegisterDto-1.html","title":"class - RegisterDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Password tidak boleh kosong'})@MinLength(6, {message: 'Password minimal 6 karakter'})@MaxLength(20, {message: 'Password maksimal 20 karakter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'Username tidak boleh kosong'})@MinLength(4, {message: 'Username minimal 4 karakter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength, MaxLength, IsString } from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  @IsNotEmpty({ message: 'Username tidak boleh kosong' })\n  @MinLength(4, { message: 'Username minimal 4 karakter' })\n  username: string;\n\n  @IsString()\n  @IsNotEmpty({ message: 'Password tidak boleh kosong' })\n  @MinLength(6, { message: 'Password minimal 6 karakter' })\n  @MaxLength(20, { message: 'Password maksimal 20 karakter' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Repository\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UserRepository extends Repository {\n  constructor(\n    @InjectRepository(User)\n    private readonly repository: Repository,\n  ) {\n    super(repository.target, repository.manager, repository.queryRunner);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: number, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Param,\n  Body,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { User } from './user.entity';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get(':id')\n  async getUser(@Param('id') id: number): Promise {\n    return this.usersService.findById(id);\n  }\n\n  @Get()\n  async getAllUsers(): Promise {\n    return this.usersService.findAll();\n  }\n\n  @Post()\n  async createUser(@Body() body): Promise {\n    return this.usersService.createUser(body.username, body.password);\n  }\n\n  @Put(':id')\n  async updateUser(@Param('id') id: number, @Body() body): Promise {\n    return this.usersService.updateUser(id, body.username, body.password);\n  }\n\n  @Delete(':id')\n  async deleteUser(@Param('id') id: number): Promise {\n    return this.usersService.deleteUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService], // Pastikan UsersService diekspor jika digunakan di modul lain\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: number, username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePassword(user: User, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findById(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return user;\n  }\n\n  async validatePassword(user: User, password: string): Promise {\n    return user ? bcrypt.compare(password, user.password) : false;\n  }\n\n  async findByUsername(username: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { username } });\n    if (!user) {\n      throw new NotFoundException(`User with username ${username} not found`);\n    }\n    return user;\n  }\n\n  async findAll(): Promise {\n    return this.usersRepository.find();\n  }\n\n  async createUser(username: string, password: string): Promise {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = this.usersRepository.create({ username, password: hashedPassword });\n    return this.usersRepository.save(user);\n  }\n\n  async updateUser(id: number, username: string, password: string): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) throw new NotFoundException('User not found');\n\n    if (username) user.username = username;\n    if (password) user.password = await bcrypt.hash(password, 10);\n\n    return this.usersRepository.save(user);\n  }\n\n  async deleteUser(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) throw new NotFoundException('User not found');\n\n    await this.usersRepository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.21\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
